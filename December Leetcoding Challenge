Day 1 ===================================> Shortest Word Distance



Day 2 ===================================> Maximum Depth of Binary Tree

class Solution {
    public int maxDepth(TreeNode root) {
        if( root == null  ) return 0;
        int ld = maxDepth(root.left);
        int rd = maxDepth(root.right);
        return Math.max(ld,rd)+1;
    }
}


Day 3 ===================================> Linked List Random Node

class Solution {

    private LinkedList<Integer> list = new LinkedList<>();
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    public Solution(ListNode head) {
        while( head != null ){
            list.add(head.val);
            head = head.next;
        }
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        int pick = (int)( Math.random() * list.size() );
        return list.get(pick);
    }
}


Day 4 ===================================> Increasing Order Search Tree

class Solution {
    TreeNode curr;
    public TreeNode increasingBST(TreeNode root) {
        TreeNode ans = new TreeNode(0);
        curr = ans;
        inorder(root);
        return ans.right;
    }
    
    public void inorder(TreeNode root){
        if( root == null ) return;
        inorder(root.left);
        root.left = null;
        curr.right = root;
        curr = curr.right;
        inorder(root.right);
    }
}


Day 5 ===================================> The kth Factor of n
