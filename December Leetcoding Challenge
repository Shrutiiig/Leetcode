Day 0 ===================================> Shortest Word Distance


Day 1 ===================================> Maximum Depth of Binary Tree

class Solution {
    public int maxDepth(TreeNode root) {
        if( root == null  ) return 0;
        int ld = maxDepth(root.left);
        int rd = maxDepth(root.right);
        return Math.max(ld,rd)+1;
    }
}


Day 2 ===================================> Linked List Random Node

class Solution {

    private LinkedList<Integer> list = new LinkedList<>();
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    public Solution(ListNode head) {
        while( head != null ){
            list.add(head.val);
            head = head.next;
        }
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        int pick = (int)( Math.random() * list.size() );
        return list.get(pick);
    }
}


Day 3 ===================================> Increasing Order Search Tree

class Solution {
    TreeNode curr;
    public TreeNode increasingBST(TreeNode root) {
        TreeNode ans = new TreeNode(0);
        curr = ans;
        inorder(root);
        return ans.right;
    }
    
    public void inorder(TreeNode root){
        if( root == null ) return;
        inorder(root.left);
        root.left = null;
        curr.right = root;
        curr = curr.right;
        inorder(root.right);
    }
}


Day 4 ===================================> The kth Factor of n

public int kthFactor(int n, int k) {
    ArrayList<Integer> list = new ArrayList<>();
    for( int i=1; i*i <= n ; i++ ){
        if( n%i == 0 ) {
            list.add(i);
            if( (n/i) != i ) list.add(n/i);
        }
    }
    if( list.size() < k ) return -1;
    Collections.sort(list);
    return list.get(k-1);
}






















Day 10 ===================================> Valid Mountain Array

class Solution {
    public boolean validMountainArray(int[] arr) {
        if( arr.length < 3 ) return false;
        
        if( arr[0] > arr[1] ) return false;
        
        int i=1;
        while( i < arr.length && arr[i-1] <= arr[i] ){
            if( arr[i-1] == arr[i] ) return false;
            i++;
        }
        if( i == arr.length ) return false;
        
        while( i < arr.length && arr[i-1] > arr[i] ){
            i++;
        }
        
        if( i == arr.length ) return true;
        return false;
    }
}


Day 6 ===================================> 



